{% extends '_base.jinja' %}
{% block body %}
    <h2>Help</h2>
    <h3>Content</h3>
    <ul id="content-table">
        <li class="content-table-main">
            <a href="#config">Configuration</a>
        </li>
        <li class="content-table-sub">
            <a href="#config-basic">Basic</a>
        </li>
        <li class="content-table-sub">
            <a href="#config-directives">Directives</a>
        </li>
        <li class="content-table-sub">
            <a href="#config-custom-config">Custom config</a>
        </li>
    </ul>

    <h2 id="config">Configuration</h2>
    <h3 id="config-basic">Basic</h3>
    <p>
        You can find the default config file in the root folder of your menial installation. It contains all configuration directives you need to customize menial.
    </p>
    <p>
        The content is JSON formated and has the following structure:
    </p>
    <pre class="prettyprint lang-python prettyprinted">
        {
            "hosts": {
                "*:80": {
                    "handler": "file",
                    "root": "default/",
                    "errorpages": "default/errorpages/",
                    "defaultdocument": "index.html",
                    "additionalheaders": "Access-Control-Allow-Origin: *\n"
                },
                "*:8080": {
                    "handler": "redirect",
                    "root": "",
                    "permanent": true,
                    "target": "http://localhost/"
                }
            },
            "logger": "console",
            "loglevel": "debug",
            "iplogging": false,
            "logfilepath": "/tmp/"
        }
    </pre>
    <h3 id="config-directives">Directives</h3>
    <p>
        <ul>
            <li>
                <b>hosts:</b> A dictionary which contains a key for each virtual host.
                <ul>
                    <li>
                        <b>*:80:</b> The * represents the hostname and the 80 the port. You can also use a specific hostname if your server has multiple hostnames or if you need to use subdomains.
                        <br>
                        Example: sub.localhost:8080
                        <br>
                        The value is a dictionary which contains the host specific configuration.
                    </li>
                    <ul>

                    <li>
                        <b>handler:</b> (Optional, default: "file") The handler is used to specify the request handler. The default handler is "file", which means, static content will be delivered. There are other types of handlers, like "python" or "redirect".
                    </li>
                    <li>
                        <b>root:</b> The document root directory. When the handler is set to "file", the content of the document root will be delivered. Path can be absolute or relative to the menial binary.
                    </li>
                    <li>
                        <b>errorpages:</b> (Optional, default: "default/errorpages/") The directory where the error pages like 404 are stored. These will be delivered when the handler is set to "file". You can use the default value if you are happy with minmalistic error pages. Otherwise you can customize the default files or create your own. They must be named as follows: http_error_code.html
                        <br>
                        Example: 404.html
                    </li>
                    <li>
                        <b>permanent</b> (Mandatory for redirect handlers) Indicates whether the redirect should be temporary (http status 302) or permanent (http status 301). Values must be boolean: true/false.
                    </li>
                    <li>
                        <b>target</b> (Mandatory for redirect handlers) The location to which the resource has been moved.
                    </li>
                    <li>
                        <b>defaultdocument:</b> (Optional, default: "index.html") Filename of the document which should be served when no file is specified in the URL. All requests for / will get the file with the specified name (if existend in the requested directory).
                    </li>
                    <li>
                        <b>additionalheaders:</b> (Optional, default: blank) If you wish to add headers to each response, you can add them here. Please note: You have to add a line break (\n) at the end of each header. It will be implemented as a list of headers in future version.
                    </li>
                    </ul>
                </ul>
            </li>
            <li>
                <b>logger:</b> (Optional, default: "console") Specifies the logger. Loggers can be one of "console" or "file". "console" writes the log entries to stdout and "file" creates a "menial.log" in the "logfilepath".
            </li>
            <li>
                <b>loglevel:</b> (Optional, default: "info") The priority level of log messages. Choices are:
                <ul>
                    <li><i>debug:</i> The most verbose level. For development and debug purposes.</li>
                    <li><i>info:</i> Still a verbose level. For normal use.</li>
                    <li><i>warning:</i> Only messages which contain warnings are logged.</li>
                    <li><i>error:</i> Messages are only logged when they were caused by an error.</li>
                    <li><i>critical:</i> When things go really bad, this level kicks in.</li>
                </ul>
                Each level shows the messages of its own level and the messages of the from the subsequent levels.<br>
                Other values for the loglevel directive will supress logging. So be careful when you change the level to another value.
            </li>
            <li>
                <b>iplogging:</b> (Optional, default: false) If present and set to true, client IP addresses will be logged. Else they will be replaced by xxx.xxx.xxx.xxx in all logfiles.
            </li>
            <li>
                <b>logfilepath:</b> (Optional, default: "/dev/null") Directory to store log files.
            </li>
         </ul>
    </p>
    <p>
        You can add a lot of hosts to the config. If you do so, you need to configure each hosts handler, root and errorpages directory. The other configuration directives (loglevel, logfilepath and logger) are considered as global.
    </p>
    <p>
        A more sophisticated example:
    </p>
    <pre>
        {
            "hosts": {
                "*:80": {
                    "handler": "file",
                    "root": "/var/www/html/myhomepage/",
                    "errorpages": "/etc/menial/errorpages/"
                }
                "myfriend:80": {
                    "handler": "file",
                    "root": "/var/www/html/myfriendshomepage/",
                    "errorpages": "/etc/menial/errorpages/"
                },
                "myfriendscousin:80": {
                    "handler": "file",
                    "root": "/var/www/html/myfriendscousinshomepage/"
                    "errorpages": "/etc/menial/errorpages/",
                    "additionalheaders": "Access-Control-Allow-Origin: *\n"
                },
                "*:8000": {
                    "handler": "python",
                    "root": "pyresponse.py",
                    "errorpages": "/can/be/blank/because/python/must/handle/errors/"
                }
            },
            "logger": "file",
            "loglevel": "info",
            "iplogging": true,
            "logfilepath": "/var/log/menial/"
        }
    </pre>
    <h3 id="config-custom-config">Custom config</h3>
        When you run menial you need to pass the location to the config file as first parameter.<br>
        You can create your own config file (e.g. copying the exsting one) and save it at any accessible locatation. Handover the new file to menial on startup.
{% endblock %}
