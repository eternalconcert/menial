name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libpython3.8-dev
          sudo apt-get install ./deployment/anvil_0.1.1.deb
      - name: Build
        run: |
          mkdir build
          g++ $(find src/ -name "*.cpp") -o build/menial.bin -std=c++11 -pthread -Wall -I /usr/include/python3.8/ -l python3.8 -I src/include/ -lssl -lcrypto -lz -D TEST=0

      - name: Create .deb
        run: |
          deployment/create_index.sh $GITHUB_RUN_NUMBER
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER/usr
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER/usr/share
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER/usr/share/menial
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER/usr/bin
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER/etc/menial
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER/usr/share/menial/resources/static/
          mkdir -p menial_0.1.$GITHUB_RUN_NUMBER/usr/share/menial/http/
          cp build/menial.bin menial_0.1.$GITHUB_RUN_NUMBER/usr/bin/menial.bin
          cp deployment/menial menial_0.1.$GITHUB_RUN_NUMBER/usr/bin/menial
          cp deployment/menial.json menial_0.1.$GITHUB_RUN_NUMBER/etc/menial/
          cp -r deployment/resources/ menial_0.1.$GITHUB_RUN_NUMBER/usr/share/menial/
          cp -r deployment/default menial_0.1.$GITHUB_RUN_NUMBER/usr/share/menial/http/
          echo "Package: menial" > menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          echo "Version: 0.1.$GITHUB_RUN_NUMBER" >> menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          echo "Section: base" >> menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          echo "Priority: optional" >> menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          echo "Architecture: amd64" >> menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          echo "Depends: python3 (>=3.6), python3-dev (>=3.6)" >> menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          echo "Description: Always at your service!" >> menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          echo "Maintainer: Christian Kokoska (info@softcreate.de)" >> menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          cat menial_0.1.$GITHUB_RUN_NUMBER/DEBIAN/control
          dpkg-deb --build menial_0.1.$GITHUB_RUN_NUMBER

      - name: Save artifact
        uses: actions/upload-artifact@v2
        with:
          name: menial_0.1.${{ github.run_number }}.deb
          path: menial_0.1.${{ github.run_number }}.deb

      - name: Build docker image
        run: |
          tar -zcvf menial.tar.gz src/
          mkdir -p website/build/styles
          cp menial_0.1.$GITHUB_RUN_NUMBER.deb website/src/static/
          python3 website/update_values.py 0.1.$GITHUB_RUN_NUMBER
          anvil -i website/src/ -s website/src/less/ -o website/build/ -t "menial" -v website/hashvalues.json
          docker build . --file GithubDockerfile --tag menial

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/menial

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag menial $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION